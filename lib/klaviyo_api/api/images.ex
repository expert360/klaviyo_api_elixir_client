# NOTE: This file is auto generated by OpenAPI Generator 7.1.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule KlaviyoAPI.Api.Images do
  @moduledoc """
  API calls for all endpoints tagged `Images`.
  """

  alias KlaviyoAPI.Connection
  import KlaviyoAPI.RequestBuilder

  @doc """
  Get Image
  Get the image with the given image ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `images:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The ID of the image
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[image]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetImageResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_image(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetImageResponse.t} | {:error, Tesla.Env.t}
  def get_image(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[image]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/images/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetImageResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Images
  Get all images in an account.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `images:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[image]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`, `equals`<br>`updated_at`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`format`: `any`, `equals`<br>`name`: `any`, `contains`, `ends-with`, `equals`, `starts-with`<br>`size`: `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`hidden`: `any`, `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:"page[size]"` (integer()): Default: 20. Min: 1. Max: 100.
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetImageResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_images(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetImageResponseCollection.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_images(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[image]" => :query,
      :filter => :query,
      :"page[cursor]" => :query,
      :"page[size]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/images/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetImageResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Update Image
  Update the image with the given image ID.<br><br>*Rate limits*:<br>Burst: `10/s`<br>Steady: `150/m`  **Scopes:** `images:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The ID of the image
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `image_partial_update_query` (ImagePartialUpdateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PatchImageResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_image(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.ImagePartialUpdateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PatchImageResponse.t} | {:error, Tesla.Env.t}
  def update_image(connection, id, revision, image_partial_update_query, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/api/images/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, image_partial_update_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.PatchImageResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Upload Image From File
  Upload an image from a file.  If you want to import an image from an existing url or a data uri, use the Upload Image From URL endpoint instead.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `100/m`<br>Daily: `100/d`  **Scopes:** `images:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `file` (String.t): The image file to upload. Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
    - `:hidden` (boolean()): If true, this image is not shown in the asset library.

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostImageResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec upload_image_from_file(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostImageResponse.t} | {:error, Tesla.Env.t}
  def upload_image_from_file(connection, revision, file, opts \\ []) do
    optional_params = %{
      :name => :form,
      :hidden => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/image-upload/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:file, :file, file)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, KlaviyoAPI.Model.PostImageResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Upload Image From URL
  Import an image from a url or data uri.  If you want to upload an image from a file, use the Upload Image From File endpoint instead.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `100/m`<br>Daily: `100/d`  **Scopes:** `images:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `image_create_query` (ImageCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostImageResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec upload_image_from_url(Tesla.Env.client, String.t, KlaviyoAPI.Model.ImageCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostImageResponse.t} | {:error, Tesla.Env.t}
  def upload_image_from_url(connection, revision, image_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/images/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, image_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, KlaviyoAPI.Model.PostImageResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end
end
