# NOTE: This file is auto generated by OpenAPI Generator 7.1.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule KlaviyoAPI.Api.Flows do
  @moduledoc """
  API calls for all endpoints tagged `Flows`.
  """

  alias KlaviyoAPI.Connection
  import KlaviyoAPI.RequestBuilder

  @doc """
  Get Flow
  Get a flow with the given flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow-action]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[flow]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[tag]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowResponseCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_flow(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow-action]" => :query,
      :"fields[flow]" => :query,
      :"fields[tag]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flows/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Action
  Get a flow action from a flow with the given flow action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow-action]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[flow-message]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[flow]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowActionResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_action(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetFlowActionResponseCompoundDocument.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_flow_action(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow-action]" => :query,
      :"fields[flow-message]" => :query,
      :"fields[flow]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flow-actions/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowActionResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow For Flow Action
  Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_action_flow(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowResponse.t} | {:error, Tesla.Env.t}
  def get_flow_action_flow(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flow-actions/#{id}/flow/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Action Messages
  Get all flow messages associated with the given action ID.  Flow messages can be sorted by the following fields, in ascending and descending order:  ascending: `id`,  `name`, `created`, `updated` descending: `-id`,  `-name`, `-created`, `-updated`  Returns a maximum of 50 flows per request, which can be paginated with offset pagination. Offset pagination uses the following parameters: `page[size]` and `page[number]`<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow-message]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
    - `:"page[size]"` (integer()): Default: 50. Min: 1. Max: 100.
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowMessageResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_action_messages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowMessageResponseCollection.t} | {:error, Tesla.Env.t}
  def get_flow_action_messages(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow-message]" => :query,
      :filter => :query,
      :"page[size]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flow-actions/#{id}/flow-messages/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowMessageResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Action Relationships Flow
  Get the flow associated with the given action ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowActionFlowRelationshipResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_action_relationships_flow(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetFlowActionFlowRelationshipResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_flow_action_relationships_flow(connection, id, revision, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/flow-actions/#{id}/relationships/flow/")
      |> add_param(:headers, :revision, revision)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowActionFlowRelationshipResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Action Relationships Messages
  Get all relationships for flow messages associated with the given flow action ID.  Returns a maximum of 50 flow message relationships per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:"page[size]"` (integer()): Default: 50. Min: 1. Max: 50.
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowActionFlowMessageRelationshipResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_action_relationships_messages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetFlowActionFlowMessageRelationshipResponseCollection.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_flow_action_relationships_messages(connection, id, revision, opts \\ []) do
    optional_params = %{
      :filter => :query,
      :"page[cursor]" => :query,
      :"page[size]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flow-actions/#{id}/relationships/flow-messages/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowActionFlowMessageRelationshipResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Flow Actions
  Get all flow actions associated with the given flow ID.  Returns a maximum of 50 flows per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow-action]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`action_type`: `any`, `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:"page[size]"` (integer()): Default: 50. Min: 1. Max: 50.
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowActionResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_flow_actions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetFlowActionResponseCollection.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_flow_flow_actions(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow-action]" => :query,
      :filter => :query,
      :"page[cursor]" => :query,
      :"page[size]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flows/#{id}/flow-actions/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowActionResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Message
  Get the flow message of a flow with the given message ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow-action]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[flow-message]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[template]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowMessageResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_message(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowMessageResponseCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_flow_message(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow-action]" => :query,
      :"fields[flow-message]" => :query,
      :"fields[template]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flow-messages/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowMessageResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Action For Message
  Get the flow action for a flow message with the given message ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow-action]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowActionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_message_action(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowActionResponse.t} | {:error, Tesla.Env.t}
  def get_flow_message_action(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow-action]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flow-messages/#{id}/flow-action/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowActionResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Message Relationships Action
  Get the [relationship](https://developers.klaviyo.com/en/reference/api_overview#relationships) for a flow message's flow action, given the flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowMessageFlowActionRelationshipResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_message_relationships_action(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowMessageFlowActionRelationshipResponse.t} | {:error, Tesla.Env.t}
  def get_flow_message_relationships_action(connection, id, revision, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/flow-messages/#{id}/relationships/flow-action/")
      |> add_param(:headers, :revision, revision)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowMessageFlowActionRelationshipResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Message Relationships Template
  Returns the ID of the related template<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `templates:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowMessageTemplateRelationshipResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_message_relationships_template(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowMessageTemplateRelationshipResponse.t} | {:error, Tesla.Env.t}
  def get_flow_message_relationships_template(connection, id, revision, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/flow-messages/#{id}/relationships/template/")
      |> add_param(:headers, :revision, revision)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowMessageTemplateRelationshipResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Message Template
  Return the related template<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `templates:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[template]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetTemplateResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_message_template(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetTemplateResponse.t} | {:error, Tesla.Env.t}
  def get_flow_message_template(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[template]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flow-messages/#{id}/template/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetTemplateResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Relationships Flow Actions
  Get all [relationships](https://developers.klaviyo.com/en/reference/api_overview#relationships) for flow actions associated with the given flow ID.  Flow action relationships can be sorted by the following fields, in ascending and descending order: `id`,  `status`, `created`, `updated`  Use filters to narrow your results.  Returns a maximum of 50 flow action relationships per request, which can be paginated with offset pagination. Offset pagination uses the following parameters: `page[size]` and `page[number]`.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`action_type`: `equals`<br>`status`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`
    - `:"page[size]"` (integer()): Default: 50. Min: 1. Max: 100.
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowFlowActionRelationshipListResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_relationships_flow_actions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowFlowActionRelationshipListResponseCollection.t} | {:error, Tesla.Env.t}
  def get_flow_relationships_flow_actions(connection, id, revision, opts \\ []) do
    optional_params = %{
      :filter => :query,
      :"page[size]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flows/#{id}/relationships/flow-actions/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowFlowActionRelationshipListResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Relationships Tags
  Return the tag IDs of all tags associated with the given flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read` `tags:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowTagRelationshipListResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_relationships_tags(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetFlowTagRelationshipListResponseCollection.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_flow_relationships_tags(connection, id, revision, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/flows/#{id}/relationships/tags/")
      |> add_param(:headers, :revision, revision)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowTagRelationshipListResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flow Tags
  Return all tags associated with the given flow ID.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read` `tags:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[tag]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetTagResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flow_tags(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetTagResponseCollection.t} | {:error, Tesla.Env.t}
  def get_flow_tags(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[tag]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flows/#{id}/tags/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetTagResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Flows
  Get all flows in an account.  Returns a maximum of 50 flows per request, which can be paginated with cursor-based pagination.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[flow-action]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[flow]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[tag]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`id`: `any`<br>`name`: `contains`, `ends-with`, `equals`, `starts-with`<br>`status`: `equals`<br>`archived`: `equals`<br>`created`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`updated`: `equals`, `greater-or-equal`, `greater-than`, `less-or-equal`, `less-than`<br>`trigger_type`: `equals`
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:"page[size]"` (integer()): Default: 50. Min: 1. Max: 50.
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetFlowResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_flows(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetFlowResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_flows(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[flow-action]" => :query,
      :"fields[flow]" => :query,
      :"fields[tag]" => :query,
      :filter => :query,
      :include => :query,
      :"page[cursor]" => :query,
      :"page[size]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/flows/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetFlowResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Update Flow Status
  Update the status of a flow with the given flow ID, and all actions in that flow.<br><br>*Rate limits*:<br>Burst: `3/s`<br>Steady: `60/m`  **Scopes:** `flows:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): ID of the Flow to update. Ex: XVTP5Q
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `flow_update_query` (FlowUpdateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PatchFlowResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_flow(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.FlowUpdateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.PatchFlowResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def update_flow(connection, id, revision, flow_update_query, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/api/flows/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, flow_update_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.PatchFlowResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end
end
