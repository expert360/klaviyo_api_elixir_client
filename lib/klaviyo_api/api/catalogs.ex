# NOTE: This file is auto generated by OpenAPI Generator 7.1.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule KlaviyoAPI.Api.Catalogs do
  @moduledoc """
  API calls for all endpoints tagged `Catalogs`.
  """

  alias KlaviyoAPI.Connection
  import KlaviyoAPI.RequestBuilder

  @doc """
  Create Back In Stock Subscription
  Subscribe a profile to receive back in stock notifications. Check out [our Back in Stock API guide](https://developers.klaviyo.com/en/docs/how_to_set_up_custom_back_in_stock) for more details.  This endpoint is specifically designed to be called from server-side applications. To create subscriptions from client-side contexts, use [POST /client/back-in-stock-subscriptions](https://developers.klaviyo.com/en/reference/create_client_back_in_stock_subscription).<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:write` `profiles:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `server_bis_subscription_create_query` (ServerBisSubscriptionCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_back_in_stock_subscription(Tesla.Env.client, String.t, KlaviyoAPI.Model.ServerBisSubscriptionCreateQuery.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def create_back_in_stock_subscription(connection, revision, server_bis_subscription_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/back-in-stock-subscriptions/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, server_bis_subscription_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Create Catalog Category
  Create a new catalog category.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_create_query` (CatalogCategoryCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogCategoryResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_catalog_category(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogCategoryCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostCatalogCategoryResponse.t} | {:error, Tesla.Env.t}
  def create_catalog_category(connection, revision, catalog_category_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-categories/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, KlaviyoAPI.Model.PostCatalogCategoryResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Create Catalog Category Relationships Items
  Create a new item relationship for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_item_op` (CatalogCategoryItemOp): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_catalog_category_relationships_items(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogCategoryItemOp.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def create_catalog_category_relationships_items(connection, id, revision, catalog_category_item_op, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-categories/#{id}/relationships/items/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_item_op)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Create Catalog Item
  Create a new catalog item.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_create_query` (CatalogItemCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogItemResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_catalog_item(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogItemCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostCatalogItemResponse.t} | {:error, Tesla.Env.t}
  def create_catalog_item(connection, revision, catalog_item_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-items/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, KlaviyoAPI.Model.PostCatalogItemResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Create Catalog Item Relationships Categories
  Create a new catalog category relationship for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_category_op` (CatalogItemCategoryOp): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_catalog_item_relationships_categories(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogItemCategoryOp.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def create_catalog_item_relationships_categories(connection, id, revision, catalog_item_category_op, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-items/#{id}/relationships/categories/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_category_op)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Create Catalog Variant
  Create a new variant for a related catalog item.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_variant_create_query` (CatalogVariantCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogVariantResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_catalog_variant(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogVariantCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.PostCatalogVariantResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def create_catalog_variant(connection, revision, catalog_variant_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-variants/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_variant_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, KlaviyoAPI.Model.PostCatalogVariantResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Delete Catalog Category
  Delete a catalog category using the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_catalog_category(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def delete_catalog_category(connection, id, revision, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/catalog-categories/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Delete Catalog Category Relationships Items
  Delete item relationships for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_item_op` (CatalogCategoryItemOp): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_catalog_category_relationships_items(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogCategoryItemOp.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def delete_catalog_category_relationships_items(connection, id, revision, catalog_category_item_op, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/catalog-categories/#{id}/relationships/items/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_item_op)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Delete Catalog Item
  Delete a catalog item with the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_catalog_item(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def delete_catalog_item(connection, id, revision, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/catalog-items/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Delete Catalog Item Relationships Categories
  Delete catalog category relationships for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_category_op` (CatalogItemCategoryOp): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_catalog_item_relationships_categories(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogItemCategoryOp.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def delete_catalog_item_relationships_categories(connection, id, revision, catalog_item_category_op, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/catalog-items/#{id}/relationships/categories/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_category_op)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Delete Catalog Variant
  Delete a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_catalog_variant(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def delete_catalog_variant(connection, id, revision, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/catalog-variants/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Categories
  Get all catalog categories in an account.  Catalog categories can be sorted by the following fields, in ascending and descending order: `created`  Currently, the only supported integration type is `$custom`, and the only supported catalog type is `$default`.  Returns a maximum of 100 categories per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`name`: `contains`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_categories(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryResponseCollection.t} | {:error, Tesla.Env.t}
  def get_catalog_categories(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category]" => :query,
      :filter => :query,
      :"page[cursor]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-categories/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Category
  Get a catalog category with the given category ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_category(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryResponse.t} | {:error, Tesla.Env.t}
  def get_catalog_category(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-categories/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Category Items
  Get all items in a category with the given category ID.  Items can be sorted by the following fields, in ascending and descending order: `created`  Returns a maximum of 100 items per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`category.id`: `equals`<br>`title`: `contains`<br>`published`: `equals`
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_category_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogItemResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_catalog_category_items(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item]" => :query,
      :"fields[catalog-variant]" => :query,
      :filter => :query,
      :include => :query,
      :"page[cursor]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-categories/#{id}/items/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Category Relationships Items
  Get all items in the given category ID.  Returns a maximum of 100 items per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryItemListResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_category_relationships_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryItemListResponseCollection.t} | {:error, Tesla.Env.t}
  def get_catalog_category_relationships_items(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-categories/#{id}/relationships/items/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryItemListResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Item
  Get a specific catalog item with the given item ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_item(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetCatalogItemResponseCompoundDocument.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_catalog_item(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item]" => :query,
      :"fields[catalog-variant]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-items/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Item Categories
  Get all catalog categories that an item with the given item ID is in.  Catalog categories can be sorted by the following fields, in ascending and descending order: `created`  Returns a maximum of 100 categories per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`name`: `contains`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_item_categories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryResponseCollection.t} | {:error, Tesla.Env.t}
  def get_catalog_item_categories(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category]" => :query,
      :filter => :query,
      :"page[cursor]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-items/#{id}/categories/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Item Relationships Categories
  Get all catalog categories that a particular item is in.  Returns a maximum of 100 categories per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemCategoryListResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_item_relationships_categories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogItemCategoryListResponseCollection.t} | {:error, Tesla.Env.t}
  def get_catalog_item_relationships_categories(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-items/#{id}/relationships/categories/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemCategoryListResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Item Variants
  Get all variants related to the given item ID.  Variants can be sorted by the following fields, in ascending and descending order: `created`  Returns a maximum of 100 variants per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`sku`: `equals`<br>`title`: `contains`<br>`published`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_item_variants(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantResponseCollection.t} | {:error, Tesla.Env.t}
  def get_catalog_item_variants(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant]" => :query,
      :filter => :query,
      :"page[cursor]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-items/#{id}/variants/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Items
  Get all catalog items in an account.  Catalog items can be sorted by the following fields, in ascending and descending order: `created`  Currently, the only supported integration type is `$custom`, and the only supported catalog type is `$default`.  Returns a maximum of 100 items per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`category.id`: `equals`<br>`title`: `contains`<br>`published`: `equals`
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_items(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogItemResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_catalog_items(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item]" => :query,
      :"fields[catalog-variant]" => :query,
      :filter => :query,
      :include => :query,
      :"page[cursor]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-items/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Variant
  Get a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_variant(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetCatalogVariantResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_catalog_variant(connection, id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variants/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Catalog Variants
  Get all variants in an account.  Variants can be sorted by the following fields, in ascending and descending order: `created`  Currently, the only supported integration type is `$custom`, and the only supported catalog type is `$default`.  Returns a maximum of 100 variants per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`ids`: `any`<br>`item.id`: `equals`<br>`sku`: `equals`<br>`title`: `contains`<br>`published`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination
    - `:sort` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sorting

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_catalog_variants(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantResponseCollection.t} | {:error, Tesla.Env.t}
  def get_catalog_variants(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant]" => :query,
      :filter => :query,
      :"page[cursor]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variants/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Create Categories Job
  Get a catalog category bulk create job with the given job ID.  An `include` parameter can be provided to get the following related resource data: `categories`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category-bulk-create-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-category]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryCreateJobResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_create_categories_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryCreateJobResponseCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_create_categories_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category-bulk-create-job]" => :query,
      :"fields[catalog-category]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-category-bulk-create-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryCreateJobResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Create Categories Jobs
  Get all catalog category bulk create jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category-bulk-create-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryCreateJobResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_create_categories_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryCreateJobResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_create_categories_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category-bulk-create-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-category-bulk-create-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryCreateJobResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Create Items Job
  Get a catalog item bulk create job with the given job ID.  An `include` parameter can be provided to get the following related resource data: `items`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item-bulk-create-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-item]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemCreateJobResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_create_items_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogItemCreateJobResponseCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_create_items_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item-bulk-create-job]" => :query,
      :"fields[catalog-item]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-item-bulk-create-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemCreateJobResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Create Items Jobs
  Get all catalog item bulk create jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item-bulk-create-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemCreateJobResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_create_items_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogItemCreateJobResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_create_items_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item-bulk-create-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-item-bulk-create-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemCreateJobResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Create Variants Job
  Get a catalog variant bulk create job with the given job ID.  An `include` parameter can be provided to get the following related resource data: `variants`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant-bulk-create-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantCreateJobResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_create_variants_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantCreateJobResponseCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_create_variants_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant-bulk-create-job]" => :query,
      :"fields[catalog-variant]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variant-bulk-create-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantCreateJobResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Create Variants Jobs
  Get all catalog variant bulk create jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant-bulk-create-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantCreateJobResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_create_variants_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantCreateJobResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_create_variants_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant-bulk-create-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variant-bulk-create-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantCreateJobResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Delete Categories Job
  Get a catalog category bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category-bulk-delete-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryDeleteJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_delete_categories_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryDeleteJobResponse.t} | {:error, Tesla.Env.t}
  def get_delete_categories_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category-bulk-delete-job]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-category-bulk-delete-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryDeleteJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Delete Categories Jobs
  Get all catalog category bulk delete jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category-bulk-delete-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryDeleteJobResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_delete_categories_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetCatalogCategoryDeleteJobResponseCollection.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_delete_categories_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category-bulk-delete-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-category-bulk-delete-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryDeleteJobResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Delete Items Job
  Get a catalog item bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item-bulk-delete-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemDeleteJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_delete_items_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetCatalogItemDeleteJobResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_delete_items_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item-bulk-delete-job]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-item-bulk-delete-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemDeleteJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Delete Items Jobs
  Get all catalog item bulk delete jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item-bulk-delete-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemDeleteJobResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_delete_items_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogItemDeleteJobResponseCollection.t} | {:error, Tesla.Env.t}
  def get_delete_items_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item-bulk-delete-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-item-bulk-delete-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemDeleteJobResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Delete Variants Job
  Get a catalog variant bulk delete job with the given job ID.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant-bulk-delete-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantDeleteJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_delete_variants_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantDeleteJobResponse.t} | {:error, Tesla.Env.t}
  def get_delete_variants_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant-bulk-delete-job]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variant-bulk-delete-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantDeleteJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Delete Variants Jobs
  Get all catalog variant bulk delete jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant-bulk-delete-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantDeleteJobResponseCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_delete_variants_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantDeleteJobResponseCollection.t} | {:error, Tesla.Env.t}
  def get_delete_variants_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant-bulk-delete-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variant-bulk-delete-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantDeleteJobResponseCollection},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Update Categories Job
  Get a catalog category bulk update job with the given job ID.  An `include` parameter can be provided to get the following related resource data: `categories`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category-bulk-update-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-category]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryUpdateJobResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_update_categories_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetCatalogCategoryUpdateJobResponseCompoundDocument.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_update_categories_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category-bulk-update-job]" => :query,
      :"fields[catalog-category]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-category-bulk-update-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryUpdateJobResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Update Categories Jobs
  Get all catalog category bulk update jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-category-bulk-update-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_update_categories_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_update_categories_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-category-bulk-update-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-category-bulk-update-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogCategoryUpdateJobResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Update Items Job
  Get a catalog item bulk update job with the given job ID.  An `include` parameter can be provided to get the following related resource data: `items`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item-bulk-update-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-item]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemUpdateJobResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_update_items_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogItemUpdateJobResponseCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_update_items_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item-bulk-update-job]" => :query,
      :"fields[catalog-item]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-item-bulk-update-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemUpdateJobResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Update Items Jobs
  Get all catalog item bulk update jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-item-bulk-update-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogItemUpdateJobResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_update_items_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetCatalogItemUpdateJobResponseCollectionCompoundDocument.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def get_update_items_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-item-bulk-update-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-item-bulk-update-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogItemUpdateJobResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Update Variants Job
  Get a catalog variate bulk update job with the given job ID.  An `include` parameter can be provided to get the following related resource data: `variants`.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `job_id` (String.t): ID of the job to retrieve.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant-bulk-update-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:"fields[catalog-variant]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:include` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#relationships

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantUpdateJobResponseCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_update_variants_job(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantUpdateJobResponseCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_update_variants_job(connection, job_id, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant-bulk-update-job]" => :query,
      :"fields[catalog-variant]" => :query,
      :include => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variant-bulk-update-jobs/#{job_id}/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantUpdateJobResponseCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Get Update Variants Jobs
  Get all catalog variant bulk update jobs.  Returns a maximum of 100 jobs per request.<br><br>*Rate limits*:<br>Burst: `350/s`<br>Steady: `3500/m`  **Scopes:** `catalogs:read`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `opts` (keyword): Optional parameters
    - `:"fields[catalog-variant-bulk-update-job]"` ([String.t]): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#sparse-fieldsets
    - `:filter` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#filtering<br>Allowed field(s)/operator(s):<br>`status`: `equals`
    - `:"page[cursor]"` (String.t): For more information please visit https://developers.klaviyo.com/en/v2024-02-15/reference/api-overview#pagination

  ### Returns

  - `{:ok, KlaviyoAPI.Model.GetCatalogVariantUpdateJobResponseCollectionCompoundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_update_variants_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.GetCatalogVariantUpdateJobResponseCollectionCompoundDocument.t} | {:error, Tesla.Env.t}
  def get_update_variants_jobs(connection, revision, opts \\ []) do
    optional_params = %{
      :"fields[catalog-variant-bulk-update-job]" => :query,
      :filter => :query,
      :"page[cursor]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/catalog-variant-bulk-update-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.GetCatalogVariantUpdateJobResponseCollectionCompoundDocument},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Create Categories Job
  Create a catalog category bulk create job to create a batch of catalog categories.  Accepts up to 100 catalog categories per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_create_job_create_query` (CatalogCategoryCreateJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogCategoryCreateJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_create_categories_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogCategoryCreateJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostCatalogCategoryCreateJobResponse.t} | {:error, Tesla.Env.t}
  def spawn_create_categories_job(connection, revision, catalog_category_create_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-category-bulk-create-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_create_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogCategoryCreateJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Create Items Job
  Create a catalog item bulk create job to create a batch of catalog items.  Accepts up to 100 catalog items per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_create_job_create_query` (CatalogItemCreateJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogItemCreateJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_create_items_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogItemCreateJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostCatalogItemCreateJobResponse.t} | {:error, Tesla.Env.t}
  def spawn_create_items_job(connection, revision, catalog_item_create_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-item-bulk-create-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_create_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogItemCreateJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Create Variants Job
  Create a catalog variant bulk create job to create a batch of catalog variants.  Accepts up to 100 catalog variants per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_variant_create_job_create_query` (CatalogVariantCreateJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogVariantCreateJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_create_variants_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogVariantCreateJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.PostCatalogVariantCreateJobResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def spawn_create_variants_job(connection, revision, catalog_variant_create_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-variant-bulk-create-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_variant_create_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogVariantCreateJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Delete Categories Job
  Create a catalog category bulk delete job to delete a batch of catalog categories.  Accepts up to 100 catalog categories per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_delete_job_create_query` (CatalogCategoryDeleteJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogCategoryDeleteJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_delete_categories_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogCategoryDeleteJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.PostCatalogCategoryDeleteJobResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def spawn_delete_categories_job(connection, revision, catalog_category_delete_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-category-bulk-delete-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_delete_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogCategoryDeleteJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Delete Items Job
  Create a catalog item bulk delete job to delete a batch of catalog items.  Accepts up to 100 catalog items per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_delete_job_create_query` (CatalogItemDeleteJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogItemDeleteJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_delete_items_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogItemDeleteJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostCatalogItemDeleteJobResponse.t} | {:error, Tesla.Env.t}
  def spawn_delete_items_job(connection, revision, catalog_item_delete_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-item-bulk-delete-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_delete_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogItemDeleteJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Delete Variants Job
  Create a catalog variant bulk delete job to delete a batch of catalog variants.  Accepts up to 100 catalog variants per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_variant_delete_job_create_query` (CatalogVariantDeleteJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogVariantDeleteJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_delete_variants_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogVariantDeleteJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.PostCatalogVariantDeleteJobResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def spawn_delete_variants_job(connection, revision, catalog_variant_delete_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-variant-bulk-delete-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_variant_delete_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogVariantDeleteJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Update Categories Job
  Create a catalog category bulk update job to update a batch of catalog categories.  Accepts up to 100 catalog categories per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_update_job_create_query` (CatalogCategoryUpdateJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogCategoryUpdateJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_update_categories_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogCategoryUpdateJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.PostCatalogCategoryUpdateJobResponse.t} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def spawn_update_categories_job(connection, revision, catalog_category_update_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-category-bulk-update-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_update_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogCategoryUpdateJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Update Items Job
  Create a catalog item bulk update job to update a batch of catalog items.  Accepts up to 100 catalog items per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_update_job_create_query` (CatalogItemUpdateJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogItemUpdateJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_update_items_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogItemUpdateJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostCatalogItemUpdateJobResponse.t} | {:error, Tesla.Env.t}
  def spawn_update_items_job(connection, revision, catalog_item_update_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-item-bulk-update-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_update_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogItemUpdateJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Spawn Update Variants Job
  Create a catalog variant bulk update job to update a batch of catalog variants.  Accepts up to 100 catalog variants per request. The maximum allowed payload size is 5MB.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_variant_update_job_create_query` (CatalogVariantUpdateJobCreateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PostCatalogVariantUpdateJobResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec spawn_update_variants_job(Tesla.Env.client, String.t, KlaviyoAPI.Model.CatalogVariantUpdateJobCreateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PostCatalogVariantUpdateJobResponse.t} | {:error, Tesla.Env.t}
  def spawn_update_variants_job(connection, revision, catalog_variant_update_job_create_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/api/catalog-variant-bulk-update-jobs/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_variant_update_job_create_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, KlaviyoAPI.Model.PostCatalogVariantUpdateJobResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Update Catalog Category
  Update a catalog category with the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog category ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_update_query` (CatalogCategoryUpdateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PatchCatalogCategoryResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_catalog_category(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogCategoryUpdateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PatchCatalogCategoryResponse.t} | {:error, Tesla.Env.t}
  def update_catalog_category(connection, id, revision, catalog_category_update_query, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/api/catalog-categories/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_update_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.PatchCatalogCategoryResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Update Catalog Category Relationships Items
  Update item relationships for the given category ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_category_item_op` (CatalogCategoryItemOp): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_catalog_category_relationships_items(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogCategoryItemOp.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def update_catalog_category_relationships_items(connection, id, revision, catalog_category_item_op, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/api/catalog-categories/#{id}/relationships/items/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_category_item_op)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Update Catalog Item
  Update a catalog item with the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_update_query` (CatalogItemUpdateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PatchCatalogItemResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_catalog_item(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogItemUpdateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PatchCatalogItemResponse.t} | {:error, Tesla.Env.t}
  def update_catalog_item(connection, id, revision, catalog_item_update_query, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/api/catalog-items/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_update_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.PatchCatalogItemResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Update Catalog Item Relationships Categories
  Update catalog category relationships for the given item ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): 
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_item_category_op` (CatalogItemCategoryOp): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_catalog_item_relationships_categories(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogItemCategoryOp.t, keyword()) :: {:ok, nil} | {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:error, Tesla.Env.t}
  def update_catalog_item_relationships_categories(connection, id, revision, catalog_item_category_op, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/api/catalog-items/#{id}/relationships/categories/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_item_category_op)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end

  @doc """
  Update Catalog Variant
  Update a catalog item variant with the given variant ID.<br><br>*Rate limits*:<br>Burst: `75/s`<br>Steady: `700/m`  **Scopes:** `catalogs:write`

  ### Parameters

  - `connection` (KlaviyoAPI.Connection): Connection to server
  - `id` (String.t): The catalog variant ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
  - `revision` (String.t): API endpoint revision (format: YYYY-MM-DD[.suffix])
  - `catalog_variant_update_query` (CatalogVariantUpdateQuery): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, KlaviyoAPI.Model.PatchCatalogVariantResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_catalog_variant(Tesla.Env.client, String.t, String.t, KlaviyoAPI.Model.CatalogVariantUpdateQuery.t, keyword()) :: {:ok, KlaviyoAPI.Model.GetAccounts4XxResponse.t} | {:ok, KlaviyoAPI.Model.PatchCatalogVariantResponse.t} | {:error, Tesla.Env.t}
  def update_catalog_variant(connection, id, revision, catalog_variant_update_query, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/api/catalog-variants/#{id}/")
      |> add_param(:headers, :revision, revision)
      |> add_param(:body, :body, catalog_variant_update_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KlaviyoAPI.Model.PatchCatalogVariantResponse},
      {"4XX", KlaviyoAPI.Model.GetAccounts4XxResponse},
      {"5XX", KlaviyoAPI.Model.GetAccounts4XxResponse}
    ])
  end
end
